import streamlit as st
import joblib
import pandas as pd
st.set_page_config(
    page_title="T√¨nh h√¨nh vi·ªác l√†m ·ªü Vi·ªát Nam",
    page_icon="üìä",
    
    layout="wide",
    )


# C·∫•u h√¨nh giao di·ªán ng∆∞·ªùi d√πng
st.title("M·ª©c L∆∞∆°ng v√† M·ª©c ƒë·ªô c·∫°nh tranh c·ªßa c√¥ng vi·ªác m√† b·∫°n ƒëang quan t√¢m ")
st.write("H√£y cho ch√∫ng t√¥i th√¥ng tin v·ªÅ c√¥ng vi·ªác c·ªßa b·∫°n ƒë·ªÉ d·ª± ƒëo√°n")

# ƒê·ªãnh nghƒ©a c√°c t√™n c·ªôt v√† ti√™u ƒë·ªÅ t∆∞∆°ng ·ª©ng
label_encoded_columns = [
    'Recruitment_Area', 'Gender_Requirement', 'Level', 'Working_Form',
    'Degree_Requirement', 'Experience_Requirement', 'Company_Type',
    'Age_Group', 'Main_Job', 'Related_Job1', 'Related_Job2'
]

column_translations = {
    'Recruitment_Area': "Khu v·ª±c b·∫°n mu·ªën l√†m vi·ªác l√†?",
    'Gender_Requirement': "Y√™u c·∫ßu gi·ªõi t√≠nh c·ªßa b·∫°n l√†?",
    'Level': "C·∫•p b·∫≠c c·ªßa b·∫°n l√†?",
    'Working_Form': "H√¨nh th·ª©c l√†m vi·ªác c·ªßa b·∫°n l√†?",
    'Degree_Requirement': "Y√™u c·∫ßu b·∫±ng c·∫•p c·ªßa b·∫°n l√†?",
    'Experience_Requirement': "Y√™u c·∫ßu kinh nghi·ªám c·ªßa b·∫°n l√†?",
    'Company_Type': "Lo·∫°i h√¨nh c√¥ng ty b·∫°n mu·ªën l√†m vi·ªác?",
    'Age_Group': "Nh√≥m tu·ªïi c·ªßa b·∫°n?",
    'Main_Job': "C√¥ng vi·ªác ch√≠nh c·ªßa b·∫°n l√†?",
    'Related_Job1': "C√¥ng vi·ªác c√≥ th·ªÉ li√™n quan 1 c·ªßa b·∫°n l√†?",
    'Related_Job2': "C√¥ng vi·ªác c√≥ th·ªÉ li√™n quan 2 c·ªßa b·∫°n l√†?"
}

# T·∫£i m√¥ h√¨nh d·ª± ƒëo√°n l∆∞∆°ng
salary_model = joblib.load("./models/Salary_Model/KNN.pkl")

# T·∫£i m√¥ h√¨nh d·ª± ƒëo√°n s·ªë ng∆∞·ªùi quan t√¢m
interest_model = joblib.load("./models/Views_Model/KNN.pkl")

# T·∫£i Label Encoders
label_encoders = {
    col: joblib.load(f"./models/Label_Encoders/{col}.pkl")
    for col in label_encoded_columns
}



# T·∫°o c√°c input cho ng∆∞·ªùi d√πng nh·∫≠p li·ªáu
user_input = {}
for col in label_encoded_columns:
    if col not in ['Main_Job', 'Related_Job1', 'Related_Job2']:
        options = label_encoders[col].classes_
        user_input[col] = st.selectbox(column_translations[col], options)

# ƒê·∫£m b·∫£o c√°c tr∆∞·ªùng Main_Job, Related_Job1, v√† Related_Job2 kh√¥ng tr√πng nhau
main_job = st.selectbox(column_translations['Main_Job'], label_encoders['Main_Job'].classes_)
related_job1 = st.selectbox(column_translations['Related_Job1'], label_encoders['Related_Job1'].classes_)
if related_job1 == "Kh√¥ng y√™u c·∫ßu th√™m":
    related_job2 = "Kh√¥ng y√™u c·∫ßu th√™m"
else:
    related_job2 = st.selectbox(column_translations['Related_Job2'], label_encoders['Related_Job2'].classes_)

if main_job == related_job1 or main_job == related_job2 or (related_job1 != "Kh√¥ng y√™u c·∫ßu th√™m" and related_job1 == related_job2):
    st.error("C√°c c√¥ng vi·ªác kh√¥ng ƒë∆∞·ª£c ch·ªçn tr√πng nhau.")
else:
    user_input['Main_Job'] = main_job
    user_input['Related_Job1'] = related_job1
    user_input['Related_Job2'] = related_job2

    # Khi nh·∫•n n√∫t "D·ª± ƒëo√°n"
    if st.button("D·ª± ƒëo√°n"):
        input_data = pd.DataFrame([user_input])

        # √Åp d·ª•ng Label Encoding cho c√°c c·ªôt ph√¢n lo·∫°i
        for col in label_encoded_columns:
            input_data[col] = label_encoders[col].transform(input_data[col])

        # D·ª± ƒëo√°n m·ª©c l∆∞∆°ng v√† s·ªë ng∆∞·ªùi quan t√¢m
        salary_prediction = salary_model.predict(input_data)
        interest_prediction = interest_model.predict(input_data)

        # Hi·ªÉn th·ªã k·∫øt qu·∫£
        st.markdown(f"<div class='highlight'>M·ª©c l∆∞∆°ng ch√∫ng t√¥i d·ª± ƒëo√°n cho b·∫°n l√†: {salary_prediction[0]:,.2f} tri·ªáu</div>", unsafe_allow_html=True)
        st.markdown(f"<div class='highlight'>C√≥ {interest_prediction[0]:,.0f} ng∆∞·ªùi ƒëang quan t√¢m ƒë·∫øn c√¥ng vi·ªác n√†y gi·ªëng b·∫°n</div>", unsafe_allow_html=True)
