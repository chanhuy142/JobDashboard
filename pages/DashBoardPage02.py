import streamlit as st
import pandas as pd
import plotly.express as px
import geopandas as gpd

# Set page configuration
st.set_page_config(
    page_title="T√¨nh h√¨nh vi·ªác l√†m ·ªü Vi·ªát Nam",
    page_icon="üìä",
    layout="wide",
)


df = pd.read_csv('data/cleaned_dataset.csv')

# Explode and clean the 'Khu v·ª±c tuy·ªÉn' column
df_exploded = df.assign(**{
    'Khu v·ª±c tuy·ªÉn': df['Khu v·ª±c tuy·ªÉn'].str.split(',')
}).explode('Khu v·ª±c tuy·ªÉn')
df_exploded['Khu v·ª±c tuy·ªÉn'] = df_exploded['Khu v·ª±c tuy·ªÉn'].str.strip()

# C√°c ng√†nh ngh·ªÅ
job_titles = set(df['C√¥ng vi·ªác ch√≠nh'].unique()).union(
    set(df['C√¥ng vi·ªác li√™n quan 1'].unique())).union(
    set(df['C√¥ng vi·ªác li√™n quan 2'].unique()))

job_titles = ['T·∫•t c·∫£'] + sorted([title for title in job_titles if pd.notna(title)])

# Sidebar
with st.sidebar:
    st.title('T√¨nh h√¨nh vi·ªác l√†m ·ªü Vi·ªát Nam')

    # Filter by area
    area_list = ['T·∫•t c·∫£'] + list(df_exploded['Khu v·ª±c tuy·ªÉn'].unique())
    area = st.selectbox('Ch·ªçn khu v·ª±c tuy·ªÉn', area_list)
    if area != 'T·∫•t c·∫£':
        df_filter = df_exploded[df_exploded['Khu v·ª±c tuy·ªÉn'] == area]
    else:
        df_filter = df

    # Filter by job title
    job_title = st.selectbox('Ch·ªçn ng√†nh ngh·ªÅ', job_titles)
    if job_title != 'T·∫•t c·∫£':
        df_filter = df_filter[
            (df_filter['C√¥ng vi·ªác ch√≠nh'] == job_title) |
            (df_filter['C√¥ng vi·ªác li√™n quan 1'] == job_title) |
            (df_filter['C√¥ng vi·ªác li√™n quan 2'] == job_title)
        ]

    # Filter by age group
    age_list = ['T·∫•t c·∫£'] + list(df['Nh√≥m tu·ªïi'].unique())
    age = st.selectbox('Ch·ªçn nh√≥m tu·ªïi', age_list)
    if age != 'T·∫•t c·∫£':
        df_filter = df_filter[df_filter['Nh√≥m tu·ªïi'] == age]

    # Filter by gender
    gender_list = ['T·∫•t c·∫£'] + list(df['Y√™u c·∫ßu gi·ªõi t√≠nh'].unique())
    gender = st.selectbox('Ch·ªçn y√™u c·∫ßu gi·ªõi t√≠nh', gender_list)
    if gender != 'T·∫•t c·∫£':
        df_filter = df_filter[df_filter['Y√™u c·∫ßu gi·ªõi t√≠nh'].str.contains(gender)]

    # Filter by job level
    level_list = ['T·∫•t c·∫£'] + list(df['C·∫•p b·∫≠c'].unique())
    level = st.selectbox('Ch·ªçn c·∫•p b·∫≠c', level_list)
    if level != 'T·∫•t c·∫£':
        df_filter = df_filter[df_filter['C·∫•p b·∫≠c'] == level]

    #  job type
    job_type_list = ['T·∫•t c·∫£'] + list(df['H√¨nh th·ª©c l√†m vi·ªác'].unique())
    job_type = st.selectbox('Ch·ªçn h√¨nh th·ª©c l√†m vi·ªác', job_type_list)
    if job_type != 'T·∫•t c·∫£':
        df_filter = df_filter[df_filter['H√¨nh th·ª©c l√†m vi·ªác'] == job_type]

    # education
    education_list = ['T·∫•t c·∫£'] + list(df['Y√™u c·∫ßu b·∫±ng c·∫•p'].unique())
    education = st.selectbox('Ch·ªçn y√™u c·∫ßu b·∫±ng c·∫•p', education_list)
    if education != 'T·∫•t c·∫£':
        df_filter = df_filter[df_filter['Y√™u c·∫ßu b·∫±ng c·∫•p'] == education]

    # experience
    experience_list = ['T·∫•t c·∫£'] + list(df['Y√™u c·∫ßu kinh nghi·ªám'].unique())
    experience = st.selectbox('Ch·ªçn y√™u c·∫ßu kinh nghi·ªám', experience_list)
    if experience != 'T·∫•t c·∫£':
        df_filter = df_filter[df_filter['Y√™u c·∫ßu kinh nghi·ªám'] == experience]

st.title("Ph√¢n t√≠ch chi ti·∫øt m·ª©c l∆∞∆°ng")

col1, col2, col3 = st.columns([2, 3, 2])
col4, col5, col6 = st.columns(3)

with col1:
    st.subheader("Ph√¢n b·ªë m·ª©c l∆∞∆°ng trung b√¨nh theo gi·ªõi t√≠nh")
    # Bi·ªÉu ƒë·ªì histogram cho m·ª©c l∆∞∆°ng trung b√¨nh, ph√¢n bi·ªát theo gi·ªõi t√≠nh
    fig = px.histogram(df_filter, x='L∆∞∆°ng trung b√¨nh', nbins=30, color_discrete_sequence=['skyblue'])
    fig.update_traces(opacity=0.75)
    st.plotly_chart(fig, use_container_width=True)

with col2:
    st.subheader("Box plot m·ª©c l∆∞∆°ng trung b√¨nh theo gi·ªõi t√≠nh")
    #  box plot cho m·ª©c l∆∞∆°ng trung b√¨nh theo gi·ªõi t√≠nh
    fig = px.box(df_filter, x='Y√™u c·∫ßu gi·ªõi t√≠nh', y='L∆∞∆°ng trung b√¨nh', color='Y√™u c·∫ßu gi·ªõi t√≠nh', 
                 color_discrete_map={'Nam': 'skyblue', 'N·ªØ': 'salmon', 'Kh√¥ng y√™u c·∫ßu': 'lightgreen'})
    st.plotly_chart(fig, use_container_width=True)

with col3:
    st.subheader("S·ªë l∆∞·ª£ng c√¥ng vi·ªác theo c·∫•p b·∫≠c")
    # Bar Chart
    df_job_level = df_filter['C·∫•p b·∫≠c'].value_counts().reset_index()
    df_job_level.columns = ['C·∫•p b·∫≠c', 'S·ªë l∆∞·ª£ng c√¥ng vi·ªác']
    fig = px.bar(df_job_level, x='C·∫•p b·∫≠c', y='S·ªë l∆∞·ª£ng c√¥ng vi·ªác', color='C·∫•p b·∫≠c')
    st.plotly_chart(fig, use_container_width=True)

with col4:
    st.subheader("H√¨nh th·ª©c l√†m vi·ªác")
    # Bi·ªÉu ƒë·ªì pie
    df_job_type = df_filter['H√¨nh th·ª©c l√†m vi·ªác'].value_counts().reset_index()
    df_job_type.columns = ['H√¨nh th·ª©c l√†m vi·ªác', 'S·ªë l∆∞·ª£ng c√¥ng vi·ªác']
    fig = px.pie(df_job_type, values='S·ªë l∆∞·ª£ng c√¥ng vi·ªác', names='H√¨nh th·ª©c l√†m vi·ªác', color='H√¨nh th·ª©c l√†m vi·ªác')
    st.plotly_chart(fig, use_container_width=True)

with col5:
    st.subheader("Bi·ªÉu ƒë·ªì Y√™u c·∫ßu b·∫±ng c·∫•p")
    # Bi·ªÉu ƒë·ªì bar
    df_degree = df_filter['Y√™u c·∫ßu b·∫±ng c·∫•p'].value_counts().reset_index()
    df_degree.columns = ['Y√™u c·∫ßu b·∫±ng c·∫•p', 'S·ªë l∆∞·ª£ng c√¥ng vi·ªác']
    fig = px.bar(df_degree, x='S·ªë l∆∞·ª£ng c√¥ng vi·ªác', y='Y√™u c·∫ßu b·∫±ng c·∫•p', orientation='h', color='Y√™u c·∫ßu b·∫±ng c·∫•p')
    st.plotly_chart(fig, use_container_width=True)

with col6:
    st.subheader("Bi·ªÉu ƒë·ªì Y√™u c·∫ßu kinh nghi·ªám")
    # Bi·ªÉu ƒë·ªì donut
    df_experience = df_filter['Y√™u c·∫ßu kinh nghi·ªám'].value_counts().reset_index()
    df_experience.columns = ['Y√™u c·∫ßu kinh nghi·ªám', 'S·ªë l∆∞·ª£ng c√¥ng vi·ªác']
    fig = px.pie(df_experience, values='S·ªë l∆∞·ª£ng c√¥ng vi·ªác', names='Y√™u c·∫ßu kinh nghi·ªám', hole=0.3)
    st.plotly_chart(fig, use_container_width=True)
