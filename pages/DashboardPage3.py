import matplotlib.pyplot as plt
import networkx as nx
import pandas as pd
import plotly.express as px
import plotly.graph_objects as go
import streamlit as st
from plotly.subplots import make_subplots
from wordcloud import WordCloud

st.set_page_config(
    page_title="T√¨nh h√¨nh vi·ªác l√†m ·ªü Vi·ªát Nam",
    page_icon="üìä",
    layout="wide",
)
df_reshaped = pd.read_csv("cleaned_dataset.csv")

with st.sidebar:
    st.title("T√¨nh h√¨nh vi·ªác l√†m ·ªü Vi·ªát Nam")
    # Split and explode the 'Khu v·ª±c tuy·ªÉn' column
    df_exploded = df_reshaped.assign(
        **{"Khu v·ª±c tuy·ªÉn": df_reshaped["Khu v·ª±c tuy·ªÉn"].str.split(",")}
    ).explode("Khu v·ª±c tuy·ªÉn")

    # Strip any leading/trailing whitespace from the 'Khu v·ª±c tuy·ªÉn' column
    df_exploded["Khu v·ª±c tuy·ªÉn"] = df_exploded["Khu v·ª±c tuy·ªÉn"].str.strip()

    # t·∫°o list t·ªânh th√†nh, c√≥ 1 lo·∫°i l√† T·∫•t c·∫£
    area_list = ["T·∫•t c·∫£"] + list(df_exploded["Khu v·ª±c tuy·ªÉn"].unique())
    # t·∫°o selectbox ƒë·ªÉ ch·ªçn t·ªânh th√†nh
    area = st.selectbox("Ch·ªçn khu v·ª±c tuy·ªÉn", area_list)
    # t·∫°o df_area ƒë·ªÉ l·ªçc theo khu v·ª±c tuy·ªÉn
    if area != "T·∫•t c·∫£":
        df_filter = df_exploded[df_exploded["Khu v·ª±c tuy·ªÉn"] == area]
    else:
        df_filter = df_reshaped
    # Ch·ªçn nh√≥m tu·ªïi
    age_list = ["T·∫•t c·∫£"] + list(df_filter["Nh√≥m tu·ªïi"].unique())
    age = st.selectbox("Ch·ªçn nh√≥m tu·ªïi", age_list)
    # l·ªçc theo nh√≥m tu·ªïi
    if age != "T·∫•t c·∫£":
        df_filter = df_filter[df_filter["Nh√≥m tu·ªïi"] == age]
    else:
        df_filter = df_filter

    # Ch·ªçn b·∫±ng c·∫•p
    degree_list = ["T·∫•t c·∫£"] + list(df_filter["Y√™u c·∫ßu b·∫±ng c·∫•p"].unique())
    degree = st.selectbox("Ch·ªçn b·∫±ng c·∫•p", degree_list)
    # l·ªçc theo b·∫±ng c·∫•p
    if degree != "T·∫•t c·∫£":
        df_filter = df_filter[df_filter["Y√™u c·∫ßu b·∫±ng c·∫•p"] == degree]
    else:
        df_filter = df_filter

st.title("Ph√¢n t√≠ch chi ti·∫øt v·ªÅ th√¥ng tin tuy·ªÉn d·ª•ng")
col1, col2 = st.columns(2, gap="small")
col3, col4 = st.columns(2, gap="small")
with col1:
    # Gi·∫£ s·ª≠ b·∫°n ƒë√£ c√≥ d·ªØ li·ªáu df_highsalary
    upper_quartile = df_reshaped["L∆∞∆°ng trung b√¨nh"].quantile(0.75)
    df_highsalary = df_reshaped[
        df_reshaped["L∆∞∆°ng trung b√¨nh"] >= upper_quartile
    ]
    df_exp = df_reshaped.copy()
    df_copy_grouped = df_exp.groupby("C√¥ng vi·ªác ch√≠nh")["S·ªë l∆∞·ª£ng tuy·ªÉn"].sum()
    df_copy_grouped = pd.DataFrame(df_copy_grouped)
    df_highsalary_grouped = df_highsalary.groupby("C√¥ng vi·ªác ch√≠nh")[
        "S·ªë l∆∞·ª£ng tuy·ªÉn"
    ].sum()
    df_highsalary_grouped = pd.DataFrame(df_highsalary_grouped)
    df_highsalary = pd.merge(
        df_highsalary_grouped, df_copy_grouped, on="C√¥ng vi·ªác ch√≠nh"
    )
    df_highsalary.reset_index(inplace=True)
    df_highsalary.columns = [
        "Ng√†nh ngh·ªÅ",
        "S·ªë l∆∞·ª£ng tuy·ªÉn l∆∞∆°ng cao",
        "T·ªïng s·ªë l∆∞·ª£ng tuy·ªÉn",
    ]
    df_highsalary["T·ªâ l·ªá c√¥ng vi·ªác l∆∞∆°ng cao"] = (
        df_highsalary["S·ªë l∆∞·ª£ng tuy·ªÉn l∆∞∆°ng cao"]
        / df_highsalary["T·ªïng s·ªë l∆∞·ª£ng tuy·ªÉn"]
        * 100
    )
    df_highsalary.sort_values(
        by="T·ªâ l·ªá c√¥ng vi·ªác l∆∞∆°ng cao", ascending=False, inplace=True
    )
    df_highsalary.reset_index(inplace=True)
    df_highsalary.drop(
        columns=["index", "S·ªë l∆∞·ª£ng tuy·ªÉn l∆∞∆°ng cao"], inplace=True
    )

    # T·∫°o subplot v·ªõi m·ªôt tr·ª•c y b√™n tr√°i v√† m·ªôt tr·ª•c y b√™n ph·∫£i
    fig = make_subplots(specs=[[{"secondary_y": True}]])

    # Th√™m bi·ªÉu ƒë·ªì line v√†o subplot cho T·ªâ l·ªá c√¥ng vi·ªác l∆∞∆°ng cao
    fig.add_trace(
        go.Scatter(
            x=df_highsalary["Ng√†nh ngh·ªÅ"].head(10),
            y=df_highsalary["T·ªâ l·ªá c√¥ng vi·ªác l∆∞∆°ng cao"].head(10),
            name="T·ªâ l·ªá c√¥ng vi·ªác l∆∞∆°ng cao",
            line=dict(color="blue"),
        ),
        secondary_y=False,
    )

    # Th√™m bi·ªÉu ƒë·ªì bar v√†o subplot cho T·ªïng s·ªë l∆∞·ª£ng tuy·ªÉn
    fig.add_trace(
        go.Bar(
            x=df_highsalary["Ng√†nh ngh·ªÅ"].head(10),
            y=df_highsalary["T·ªïng s·ªë l∆∞·ª£ng tuy·ªÉn"].head(10),
            name="T·ªïng s·ªë l∆∞·ª£ng tuy·ªÉn",
        ),
        secondary_y=True,
    )

    # C·∫≠p nh·∫≠t layout
    fig.update_layout(
        title_text="Top 10 ng√†nh ngh·ªÅ c√≥ t·ªâ l·ªá c√¥ng vi·ªác l∆∞∆°ng cao",
        xaxis_tickangle=-45,
        legend=dict(x=1, y=1, xanchor="right", yanchor="top"),
        height=500,
        width=600,
    )

    # C·∫≠p nh·∫≠t ti√™u ƒë·ªÅ cho c√°c tr·ª•c y
    fig.update_yaxes(title_text="T·ªâ l·ªá c√¥ng vi·ªác l∆∞∆°ng cao", secondary_y=False)
    fig.update_yaxes(title_text="T·ªïng s·ªë l∆∞·ª£ng tuy·ªÉn", secondary_y=True)

    st.plotly_chart(fig)

with col3:

    st.markdown("###### **T·ª´ kh√≥a ph·ªï bi·∫øn**")

    # Split c√°c gi√° tr·ªã trong c·ªôt 'T·ª´ kho√°' v√† v·∫Ω word cloud
    df_reshaped["T·ª´ kh√≥a"] = df_reshaped["T·ª´ kh√≥a"].str.split("; ")
    df_keywords = df_reshaped.explode("T·ª´ kh√≥a")
    df_keywords = df_keywords["T·ª´ kh√≥a"].value_counts().reset_index()
    df_keywords.columns = ["T·ª´ kh√≥a", "S·ªë l∆∞·ª£ng"]
    df_keywords = df_keywords.sort_values(by="S·ªë l∆∞·ª£ng", ascending=False)
    # V·∫Ω word cloud
    wordcloud = WordCloud(
        width=800, height=400, background_color="#0f1116"
    ).generate(df_keywords["T·ª´ kh√≥a"].to_string(index=False))
    st.image(
        wordcloud.to_image(),
        caption="T·ª´ kh√≥a ph·ªï bi·∫øn",
        use_column_width=True,
    )
    # Th√™m ti√™u ƒë·ªÅ cho wordcloud b·∫±ng k√≠ch th∆∞·ªõc ti√™u ƒë·ªÅ c·ªßa c√°c bi·ªÉu ƒë·ªì kh√°c


with col4:
    df_grouped = (
        df_reshaped.groupby("C√¥ng vi·ªác ch√≠nh")["L∆∞·ª£t xem"].sum().reset_index()
    )

    # L·∫•y top 10 c√¥ng vi·ªác ch√≠nh c√≥ nhi·ªÅu l∆∞·ª£t xem nh·∫•t
    df_top10 = df_grouped.nlargest(10, "L∆∞·ª£t xem")

    # V·∫Ω Tree Map
    fig = px.treemap(
        df_top10,
        path=["C√¥ng vi·ªác ch√≠nh"],
        values="L∆∞·ª£t xem",
        title="Top 10 c√¥ng vi·ªác ch√≠nh c√≥ nhi·ªÅu l∆∞·ª£t xem nh·∫•t",
        color="L∆∞·ª£t xem",
        color_continuous_scale=px.colors.sequential.Sunset,
        height=500,
        width=600,
    )

    fig.update_layout(margin=dict(t=50, l=25, r=25, b=25))

    st.plotly_chart(fig)

with col2:
    # H√†m ƒë·ªÉ x·ª≠ l√Ω vi·ªác th√™m gi√¢y n·∫øu thi·∫øu
    def ensure_full_datetime(date_str):
        if pd.isna(date_str):
            return date_str
        if (
            len(date_str) == 16
        ):  # Ki·ªÉm tra n·∫øu ƒë·ªô d√†i chu·ªói l√† 'YYYY-MM-DD HH:MM' ho·∫∑c 'DD/MM/YYYY HH:MM'
            return date_str + ":00"
        return date_str

    # √Åp d·ª•ng h√†m ƒë·ªÉ ƒë·∫£m b·∫£o t·∫•t c·∫£ c√°c gi√° tr·ªã datetime ƒë·ªÅu c√≥ gi√¢y
    df_reshaped["Ng√†y c·∫≠p nh·∫≠t"] = df_reshaped["Ng√†y c·∫≠p nh·∫≠t"].apply(
        ensure_full_datetime
    )

    # Chuy·ªÉn ƒë·ªïi c·ªôt 'Ng√†y c·∫≠p nh·∫≠t' th√†nh ki·ªÉu datetime, cho ph√©p suy lu·∫≠n ƒë·ªãnh d·∫°ng
    df_reshaped["Ng√†y c·∫≠p nh·∫≠t"] = pd.to_datetime(
        df_reshaped["Ng√†y c·∫≠p nh·∫≠t"],
        infer_datetime_format=True,
        dayfirst=True,
        errors="coerce",
    )

    # Lo·∫°i b·ªè c√°c gi√° tr·ªã NaT
    df_reshaped = df_reshaped.dropna(subset=["Ng√†y c·∫≠p nh·∫≠t"])

    # T·∫°o c·ªôt ng√†y
    df_reshaped["Ng√†y"] = df_reshaped["Ng√†y c·∫≠p nh·∫≠t"].dt.date

    # T√≠nh t·ªïng s·ªë l∆∞·ª£ng tuy·ªÉn theo ng√†y
    df_daily = df_reshaped.groupby("Ng√†y")["S·ªë l∆∞·ª£ng tuy·ªÉn"].sum().reset_index()

    # V·∫Ω bi·ªÉu ƒë·ªì ƒë∆∞·ªùng
    fig = px.line(
        df_daily, x="Ng√†y", y="S·ªë l∆∞·ª£ng tuy·ªÉn", title="S·ªë b√†i ƒëƒÉng theo ng√†y"
    )

    # C·∫≠p nh·∫≠t layout ƒë·ªÉ hi·ªÉn th·ªã ng√†y v√† th√°ng, v√† xoay nh√£n tr·ª•c x 45 ƒë·ªô
    fig.update_layout(
        xaxis_title="Ng√†y",
        yaxis_title="S·ªë l∆∞·ª£ng tuy·ªÉn",
        xaxis_tickformat="%d-%m",
        xaxis=dict(tickangle=-45),
        height=500,
        width=600,
    )

    st.plotly_chart(fig)
