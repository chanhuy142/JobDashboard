#ƒë·∫øm s√¥ lu·ªçng job theo t·ª´ng lo·∫°i b·∫±ng c·∫•p
import streamlit as st
import pandas as pd
import altair as alt
import plotly.express as px
import plotly.graph_objects as go
from plotly.subplots import make_subplots
import geopandas as gpd
from wordcloud import WordCloud
import base64
from io import BytesIO

st.set_page_config(
    page_title="T√¨nh h√¨nh vi·ªác l√†m ·ªü Vi·ªát Nam",
    page_icon="üìä",
    layout="wide",
    )
alt.themes.enable("dark")

df_reshaped = pd.read_csv('cleaned_dataset.csv')

with st.sidebar:
    st.title('T√¨nh h√¨nh vi·ªác l√†m ·ªü Vi·ªát Nam')
    # Split and explode the 'Khu v·ª±c tuy·ªÉn' column
    df_exploded = df_reshaped.assign(**{
        'Khu v·ª±c tuy·ªÉn': df_reshaped['Khu v·ª±c tuy·ªÉn'].str.split(',')
    }).explode('Khu v·ª±c tuy·ªÉn')

    # Strip any leading/trailing whitespace from the 'Khu v·ª±c tuy·ªÉn' column
    df_exploded['Khu v·ª±c tuy·ªÉn'] = df_exploded['Khu v·ª±c tuy·ªÉn'].str.strip()
    
    #t·∫°o list t·ªânh th√†nh, c√≥ 1 lo·∫°i l√† T·∫•t c·∫£
    area_list = ['T·∫•t c·∫£'] + list(df_exploded['Khu v·ª±c tuy·ªÉn'].unique())
    #t·∫°o selectbox ƒë·ªÉ ch·ªçn t·ªânh th√†nh
    area = st.selectbox('Ch·ªçn khu v·ª±c tuy·ªÉn', area_list)
    #t·∫°o df_area ƒë·ªÉ l·ªçc theo khu v·ª±c tuy·ªÉn
    if area != 'T·∫•t c·∫£':
        df_filter = df_exploded[df_exploded['Khu v·ª±c tuy·ªÉn'] == area]
    else:
        df_filter = df_reshaped
    #Ch·ªçn nh√≥m tu·ªïi
    age_list = ['T·∫•t c·∫£'] + list(df_filter['Nh√≥m tu·ªïi'].unique())
    age = st.selectbox('Ch·ªçn nh√≥m tu·ªïi', age_list)
    #l·ªçc theo nh√≥m tu·ªïi
    if age != 'T·∫•t c·∫£':
        df_filter = df_filter[df_filter['Nh√≥m tu·ªïi'] == age]
    else:
        df_filter = df_filter
    
    #Ch·ªçn b·∫±ng c·∫•p
    degree_list = ['T·∫•t c·∫£'] + list(df_filter['Y√™u c·∫ßu b·∫±ng c·∫•p'].unique())
    degree = st.selectbox('Ch·ªçn b·∫±ng c·∫•p', degree_list)
    #l·ªçc theo b·∫±ng c·∫•p
    if degree != 'T·∫•t c·∫£':
        df_filter = df_filter[df_filter['Y√™u c·∫ßu b·∫±ng c·∫•p'] == degree]
    else:
        df_filter = df_filter


col = st.columns((1,1), gap='small')
with col[0]:


# Gi·∫£ s·ª≠ b·∫°n ƒë√£ c√≥ d·ªØ li·ªáu df_highsalary
# df_highsalary l√† m·ªôt DataFrame ch·ª©a c√°c c·ªôt: 'Ng√†nh ngh·ªÅ', 'T·ªâ l·ªá c√¥ng vi·ªác l∆∞∆°ng cao', 'T·ªïng s·ªë l∆∞·ª£ng tuy·ªÉn'

# T·ªïng s·ªë l∆∞·ª£ng tuy·ªÉn d·ª•ng trong c√°c ng√†nh
    
    upper_quartile = df_reshaped['M·ª©c l∆∞∆°ng trung b√¨nh'].quantile(0.75)
    df_highsalary = df_reshaped[df_reshaped['M·ª©c l∆∞∆°ng trung b√¨nh'] >= upper_quartile]
    df_exp = df_reshaped.copy()
    df_exp['Ng√†nh ngh·ªÅ'] = df_exp['Ng√†nh ngh·ªÅ'].str.split('/')
    df_exp = df_exp.explode('Ng√†nh ngh·ªÅ')
    df_exp.reset_index(inplace=True)
    df_exp.drop(columns=['index'], inplace=True)
    df_copy_grouped = df_exp.groupby('Ng√†nh ngh·ªÅ')['S·ªë l∆∞·ª£ng tuy·ªÉn'].sum()
    df_copy_grouped = pd.DataFrame(df_copy_grouped)

    df_exp = df_reshaped.copy()
    df_exp['C√¥ng vi·ªác ch√≠nh'] = df_exp['C√¥ng vi·ªác ch√≠nh']
    df_exp = df_exp('C√¥ng vi·ªác ch√≠nh')
    df_exp.reset_index(inplace=True)
    df_exp.drop(columns=['index'], inplace=True)
    df_copy_grouped = df_exp.groupby('C√¥ng vi·ªác ch√≠nh')['S·ªë l∆∞·ª£ng tuy·ªÉn'].sum()
    df_copy_grouped = pd.DataFrame(df_copy_grouped)
    df_copy_grouped.head()

    df_highsalary.loc[:, 'Ng√†nh ngh·ªÅ'] = df_highsalary['Ng√†nh ngh·ªÅ'].str.split('/')
    df_highsalary = df_highsalary.explode('Ng√†nh ngh·ªÅ')
    df_highsalary.reset_index(inplace=True)
    df_highsalary.drop(columns=['index'], inplace=True)
    df_highsalary_grouped = df_highsalary.groupby('Ng√†nh ngh·ªÅ')['S·ªë l∆∞·ª£ng tuy·ªÉn'].sum()
    df_highsalary_grouped = pd.DataFrame(df_highsalary_grouped)
    df_highsalary_grouped.head(10)


    # T·∫°o subplot v·ªõi m·ªôt tr·ª•c y b√™n tr√°i v√† m·ªôt tr·ª•c y b√™n ph·∫£i
    fig = make_subplots(specs=[[{"secondary_y": True}]])

    # Th√™m bi·ªÉu ƒë·ªì bar v√†o subplot
    fig.add_trace(
        go.Bar(
            x=df_highsalary['Ng√†nh ngh·ªÅ'].head(10),
            y=df_highsalary['T·ªâ l·ªá c√¥ng vi·ªác l∆∞∆°ng cao'].head(10),
            name='T·ªâ l·ªá c√¥ng vi·ªác l∆∞∆°ng cao'
        ),
        secondary_y=False,
    )

    # Th√™m bi·ªÉu ƒë·ªì line v√†o subplot
    fig.add_trace(
        go.Scatter(
            x=df_highsalary['Ng√†nh ngh·ªÅ'].head(10),
            y=df_highsalary['T·ªïng s·ªë l∆∞·ª£ng tuy·ªÉn'].head(10),
            name='T·ªïng s·ªë l∆∞·ª£ng tuy·ªÉn',
            line=dict(color='red')
        ),
        secondary_y=True,
    )

    # C·∫≠p nh·∫≠t layout
    fig.update_layout(
        title_text='Top 10 ng√†nh ngh·ªÅ c√≥ t·ªâ l·ªá c√¥ng vi·ªác l∆∞∆°ng cao',
        xaxis_tickangle=-90
    )

    # C·∫≠p nh·∫≠t ti√™u ƒë·ªÅ cho c√°c tr·ª•c y
    fig.update_yaxes(title_text="T·ªâ l·ªá c√¥ng vi·ªác l∆∞∆°ng cao", secondary_y=False)
    fig.update_yaxes(title_text="T·ªïng s·ªë l∆∞·ª£ng tuy·ªÉn", secondary_y=True)

    fig.show()



    # Split c√°c gi√° tr·ªã trong c·ªôt 'T·ª´ kho√°' v√† v·∫Ω word cloud
    df_reshaped['T·ª´ kh√≥a'] = df_reshaped['T·ª´ kh√≥a'].str.split('; ')
    df_keywords = df_reshaped.explode('T·ª´ kh√≥a')
    df_keywords = df_keywords['T·ª´ kh√≥a'].value_counts().reset_index()
    df_keywords.columns = ['T·ª´ kh√≥a', 'S·ªë l∆∞·ª£ng']
    df_keywords = df_keywords.sort_values(by='S·ªë l∆∞·ª£ng', ascending=False)
    #V·∫Ω word cloud
    wordcloud = WordCloud(width=800, height=400, background_color ='#0f1116').generate(df_keywords['T·ª´ kh√≥a'].to_string(index=False))
    st.image(wordcloud.to_image(), caption='T·ª´ kh√≥a ph·ªï bi·∫øn', use_column_width=True)

# with col[1]:


