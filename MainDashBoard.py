#ƒë·∫øm s√¥ lu·ªçng job theo t·ª´ng lo·∫°i b·∫±ng c·∫•p
import streamlit as st
import pandas as pd
import altair as alt
import plotly.express as px
import geopandas as gpd

st.set_page_config(
    page_title="T√¨nh h√¨nh vi·ªác l√†m ·ªü Vi·ªát Nam",
    page_icon="üìä",
    
    layout="wide",
    )
alt.themes.enable("dark")

df_reshaped = pd.read_csv('cleaned_dataset.csv')

with st.sidebar:
    st.title('T√¨nh h√¨nh vi·ªác l√†m ·ªü Vi·ªát Nam')
        # Split and explode the 'Khu v·ª±c tuy·ªÉn' column
    df_exploded = df_reshaped.assign(**{
        'Khu v·ª±c tuy·ªÉn': df_reshaped['Khu v·ª±c tuy·ªÉn'].str.split(',')
    }).explode('Khu v·ª±c tuy·ªÉn')

    # Strip any leading/trailing whitespace from the 'Khu v·ª±c tuy·ªÉn' column
    df_exploded['Khu v·ª±c tuy·ªÉn'] = df_exploded['Khu v·ª±c tuy·ªÉn'].str.strip()
    
    #t·∫°o list t·ªânh th√†nh, c√≥ 1 lo·∫°i l√† T·∫•t c·∫£
    area_list = ['T·∫•t c·∫£'] + list(df_exploded['Khu v·ª±c tuy·ªÉn'].unique())
    #t·∫°o selectbox ƒë·ªÉ ch·ªçn t·ªânh th√†nh
    area = st.selectbox('Ch·ªçn khu v·ª±c tuy·ªÉn', area_list)
    #t·∫°o df_area ƒë·ªÉ l·ªçc theo khu v·ª±c tuy·ªÉn
    if area != 'T·∫•t c·∫£':
        df_filter = df_exploded[df_exploded['Khu v·ª±c tuy·ªÉn'] == area]
    else:
        df_filter = df_reshaped
    #Ch·ªçn nh√≥m tu·ªïi
    age_list = ['T·∫•t c·∫£'] + list(df_filter['Nh√≥m tu·ªïi'].unique())
    age = st.selectbox('Ch·ªçn nh√≥m tu·ªïi', age_list)
    #l·ªçc theo nh√≥m tu·ªïi
    if age != 'T·∫•t c·∫£':
        df_filter = df_filter[df_filter['Nh√≥m tu·ªïi'] == age]
    else:
        df_filter = df_filter
    


col = st.columns((1,1), gap='small')

with col[0]:
    total_pos =df_filter['S·ªë l∆∞·ª£ng tuy·ªÉn'].count()
    total_pos = int(total_pos)
    #ƒë·∫øm s·ªë lu·ªçng c√¥ng vi·ªác b·∫±ng t·ªïng s·ªë l∆∞·ª£n tuy·ªÉn
    total_job = df_filter['S·ªë l∆∞·ª£ng tuy·ªÉn'].sum()
    #√©p v·ªÅ int
    total_job = int(total_job)
    
    st.markdown('#### T·ªïng quan')

    st.markdown(f'<div style="width:50%;background-color:#262730;color:white;font-size:20px;border-radius:2px;text-align:center;padding:5px; padding-right:5px; padding-left:5px"> <div style="font-size: 30px; font-weight: bold">{total_pos}</div><div>S·ªë c√¥ng vi·ªác</div> </div>', 
                unsafe_allow_html=True)
    #make a little gap only space between the box and the next box
    st.markdown(f'<div style="height: 20px;"></div>', unsafe_allow_html=True)
    # t·∫°o 1 box c√≥ witdh height v√† background color ƒë·ªÉ hi·ªÉn th·ªã s·ªë l∆∞·ª£ng c√¥ng vi·ªác
    st.markdown(f'<div style="width:50%;background-color:#262730;color:white;font-size:20px;border-radius:2px;text-align:center;padding:5px; padding-right:5px; padding-left:5px"> <div style="font-size: 30px; font-weight: bold">{total_job}</div><div>S·ªë l∆∞·ª£ng tuy·ªÉn</div> </div>', 
                unsafe_allow_html=True)
    #make a little gap only space between the box and the next box
    st.markdown(f'<div style="height: 20px;"></div>', unsafe_allow_html=True)
    

    total_job_title = df_filter['C√¥ng vi·ªác ch√≠nh'].nunique()
    total_job_title = int(total_job_title)
    st.markdown(f'<div style="width:50%;background-color:#262730;color:white;font-size:20px;border-radius:2px;text-align:center;padding:5px; padding-right:5px; padding-left:5px; "> <div style="font-size: 30px; font-weight: bold">{total_job_title}</div><div>Ng√†nh ngh·ªÅ</div> </div>',
    unsafe_allow_html=True)
    st.markdown(f'<div style="height: 50px;"></div>', unsafe_allow_html=True)

    #make histogram chart for L∆∞∆°ng trung b√¨nh
    st.markdown('#### L∆∞∆°ng trung b√¨nh')
    # v·∫Ω histogram chart cho l∆∞∆°ng trung b√¨nh b·∫±ng plotly
    fig = px.histogram(df_reshaped, x='L∆∞∆°ng trung b√¨nh', nbins=30)
    fig.update_layout(bargap=0.1, autosize=False, width=450, height=200)
    with st.container(height=200):
        st.plotly_chart(fig, use_container_width=True)

with col[1]:
    
        
    #create world map

    st.markdown(f'<div style="height: 20px;"></div>', unsafe_allow_html=True)
    area_df = pd.Series(df_reshaped['Khu v·ª±c tuy·ªÉn']).str.split(',').explode().str.strip()
    area_df = pd.DataFrame(area_df.value_counts())
    area_df.reset_index(inplace=True)
    area_df.columns = ['Khu v·ª±c', 'S·ªë l∆∞·ª£ng']
    
        # ƒê·ªçc b·∫£n ƒë·ªì
    vietnam_map = gpd.read_file('vietnam.geojson')

    # Chu·∫©n h√≥a t√™n t·ªânh th√†nh
    vietnam_map = vietnam_map.replace({"H·ªì Ch√≠ Minh city": "TP.HCM"})
    vietnam_map = vietnam_map.replace({"Th·ª´a Thi√™n - Hu·∫ø": "Th·ª´a Thi√™n Hu·∫ø"})
    print(list(vietnam_map['name']))

    # Merge d·ªØ li·ªáu
    merged = vietnam_map.set_index('name').join(area_df.set_index('Khu v·ª±c'))

    # Prepare data for Plotly
    merged = merged.reset_index()
    custom_colorscale = [
    [0.0, "rgb(255, 255, 204)"],
    [0.01, "rgb(255, 237, 160)"],
    [0.015, "rgb(254, 200, 118)"],
    [0.03, "rgb(254, 178, 76)"],

    [0.1, "rgb(189, 0, 38)"],
    [1.0, "rgb(128, 0, 38)"]]
    
    fig = px.choropleth(merged,
                        geojson=merged.geometry,
                        locations=merged.index,
                        color="S·ªë l∆∞·ª£ng",
                        hover_name="name",
                        hover_data=["S·ªë l∆∞·ª£ng"],
                        color_continuous_scale=custom_colorscale,
                        labels={'S·ªë l∆∞·ª£ng':'S·ªë l∆∞·ª£ng c√¥ng vi·ªác'},
                        projection="mercator",
                       

                        )

    fig.update_geos(fitbounds="locations", visible=False)
    fig.update_layout(title_text='S·ªë l∆∞·ª£ng c√¥ng vi·ªác tuy·ªÉn theo khu v·ª±c', title_x=0.5, geo=dict(bgcolor= 'rgba(0,0,0,0)'), autosize=False, width=450, height=650)
    with st.container(height=650):
        st.plotly_chart(fig, use_container_width=True)
        
        






        

    
    
